
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;


namespace cfg.GameLogic
{
public partial class TbEffect
{
    private readonly System.Collections.Generic.Dictionary<GameLogic.BaseEffectType, GameLogic.Effect> _dataMap;
    private readonly System.Collections.Generic.List<GameLogic.Effect> _dataList;
    
    public TbEffect(ByteBuf _buf)
    {
        int n = _buf.ReadSize();
        _dataMap = new System.Collections.Generic.Dictionary<GameLogic.BaseEffectType, GameLogic.Effect>(n);
        _dataList = new System.Collections.Generic.List<GameLogic.Effect>(n);
        for(int i = n ; i > 0 ; --i)
        {
            GameLogic.Effect _v;
            _v = global::cfg.GameLogic.Effect.DeserializeEffect(_buf);
            _dataList.Add(_v);
            _dataMap.Add(_v.EffectType, _v);
        }
    }

    public System.Collections.Generic.Dictionary<GameLogic.BaseEffectType, GameLogic.Effect> DataMap => _dataMap;
    public System.Collections.Generic.List<GameLogic.Effect> DataList => _dataList;

    public GameLogic.Effect GetOrDefault(GameLogic.BaseEffectType key) => _dataMap.TryGetValue(key, out var v) ? v : null;
    public GameLogic.Effect Get(GameLogic.BaseEffectType key) => _dataMap[key];
    public GameLogic.Effect this[GameLogic.BaseEffectType key] => _dataMap[key];

    public void ResolveRef(Tables tables)
    {
        foreach(var _v in _dataList)
        {
            _v.ResolveRef(tables);
        }
    }

}

}

